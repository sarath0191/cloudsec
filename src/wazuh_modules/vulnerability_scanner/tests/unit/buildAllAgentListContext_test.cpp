/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * February 21, 2024.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "buildAllAgentListContext_test.hpp"
#include "TrampolineOsDataCache.hpp"
#include "buildAllAgentListContext.hpp"

TEST_F(BuildAllAgentListContextTest, BuildAllAgentListContext)
{
    std::filesystem::create_directories(TEST_DB_PATH);
    m_socketServer =
        std::make_shared<SocketServer<Socket<OSPrimitives, SizeHeaderProtocol>, EpollWrapper>>(TEST_SOCKET_PATH);

    m_socketServer->listen(
        [&](const int fd, const char* data, uint32_t size, const char* dataHeader, uint32_t sizeHeader)
        {
            std::ignore = dataHeader;
            std::ignore = sizeHeader;

            std::string receivedMsg(data, size);
            EXPECT_STREQ(receivedMsg.c_str(), EXPECTED_QUERY.c_str());

            m_socketServer->send(fd, "ok []", 5);
        });

    auto allAgentContext = std::make_shared<TBuildAllAgentListContext<TScanContext<TrampolineOsDataCache>>>();

    // Context is not used
    allAgentContext->handleRequest(nullptr);
}

TEST_F(BuildAllAgentListContextTest, BuildAllAgentListContextWithElements)
{
    static const std::string MESSAGE {
        R"(ok [{"id":1, "name":"name", "version": "Wazuh 4.4.4", "ip":"192.168.0.1","node_name":"node_1"}])"};
    m_socketServer =
        std::make_shared<SocketServer<Socket<OSPrimitives, SizeHeaderProtocol>, EpollWrapper>>(TEST_SOCKET_PATH);

    m_socketServer->listen(
        [&](const int fd, const char* data, uint32_t size, const char* dataHeader, uint32_t sizeHeader)
        {
            std::ignore = dataHeader;
            std::ignore = sizeHeader;

            std::string receivedMsg(data, size);
            EXPECT_STREQ(receivedMsg.c_str(), EXPECTED_QUERY.c_str());

            m_socketServer->send(fd, MESSAGE.c_str(), MESSAGE.size());
        });

    auto allAgentContext = std::make_shared<TBuildAllAgentListContext<TScanContext<TrampolineOsDataCache>>>();

    auto scanContext = std::make_shared<TScanContext<TrampolineOsDataCache>>();

    // Context is not used
    allAgentContext->handleRequest(scanContext);

    EXPECT_EQ(scanContext->m_agents.size(), 1);
}
