/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * March 11, 2024.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _BUILD_SINGLE_AGENT_INFO_CONTEXT_HPP
#define _BUILD_SINGLE_AGENT_INFO_CONTEXT_HPP

#include "chainOfResponsability.hpp"
#include "loggerHelper.h"
#include "scanContext.hpp"
#include "vulnerabilityScanner.hpp"
#include "wazuhDBQueryBuilder.hpp"

/**
 * @brief Orchestrates queries over the global Wazuh system
 *
 * This class is responsible for managing the execution of queries within the global Wazuh environment.
 *
 * @tparam TScanContext scan context type.
 */
template<typename TScanContext = ScanContext>
class TBuildSingleAgentListInfoContext final : public AbstractHandler<std::shared_ptr<TScanContext>>
{

public:
    /**
     * @brief Construct a new global fetch object
     */
    explicit TBuildSingleAgentListInfoContext() = default;

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data A shared pointer to the input data containing details of the query request.
     *
     * @return A shared pointer to a `TScanContext` object representing the query response.
     */
    std::shared_ptr<TScanContext> handleRequest(std::shared_ptr<TScanContext> data) override
    {
        data->m_agents.push_back({data->agentId().data(),
                                  data->agentName().data(),
                                  data->agentVersion().data(),
                                  data->agentIp().data(),
                                  data->agentNodeName().data()});
        return AbstractHandler<std::shared_ptr<TScanContext>>::handleRequest(std::move(data));
    }
};

using BuildSingleAgentListInfoContext = TBuildSingleAgentListInfoContext<>;

#endif // _BUILD_SINGLE_AGENT_INFO_CONTEXT_HPP
