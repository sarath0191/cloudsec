/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * March 25, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _SCAN_ORCHESTRATOR_HPP
#define _SCAN_ORCHESTRATOR_HPP

#include "factoryOrchestrator.hpp"
#include "flatbuffers/include/syscollector_deltas_generated.h"
#include "flatbuffers/include/syscollector_synchronization_generated.h"
#include "indexerConnector.hpp"
#include "messageBuffer_generated.h"
#include "scanContext.hpp"
#include "wdbDataException.hpp"
#include <memory>
#include <string>
#include <variant>

constexpr auto INVENTORY_DB_PATH = "queue/vd/inventory";
constexpr auto DELAYED_EVENTS_BULK_SIZE {1};
constexpr auto DELAYED_QUEUE_PATH = "queue/vd/delayed";
constexpr auto DELAYED_POSTPONE_SECONDS {60};

using EventDispatcher = TThreadEventDispatcher<rocksdb::Slice,
                                               rocksdb::PinnableSlice,
                                               std::function<void(std::queue<rocksdb::PinnableSlice>&)>>;

using EventDelayedDispatcher =
    TThreadEventDispatcher<rocksdb::Slice,
                           rocksdb::PinnableSlice,
                           std::function<void(rocksdb::PinnableSlice&)>,
                           RocksDBQueueCF<rocksdb::Slice, rocksdb::PinnableSlice>,
                           Utils::TSafeMultiQueue<rocksdb::Slice,
                                                  rocksdb::PinnableSlice,
                                                  RocksDBQueueCF<rocksdb::Slice, rocksdb::PinnableSlice>>>;

/**
 * @brief ScanOrchestrator class.
 *
 */
template<typename TScanContext = ScanContext,
         typename TFactoryOrchestrator = FactoryOrchestrator,
         typename TOrchestrationNode = AbstractHandler<std::shared_ptr<TScanContext>>,
         typename TIndexerConnector = IndexerConnector,
         typename TDatabaseFeedManager = DatabaseFeedManager,
         typename TSocketDBWrapper = SocketDBWrapper,
         typename TOSPrimitives = OSPrimitives,
         auto DelayedPostponeSeconds = DELAYED_POSTPONE_SECONDS>
class TScanOrchestrator final : public TOSPrimitives
{
public:
    /**
     * @brief Class constructor.
     *
     * @param indexerConnector Indexer connector.
     * @param databaseFeedManager Database feed manager.
     * @param reportDispatcher Report dispatcher queue to send vulnerability reports.
     * @param mutex Mutex to protect the access to the internal databases.
     */
    // LCOV_EXCL_START
    explicit TScanOrchestrator(std::shared_ptr<TIndexerConnector> indexerConnector,
                               std::shared_ptr<TDatabaseFeedManager> databaseFeedManager,
                               std::shared_ptr<ReportDispatcher> reportDispatcher,
                               std::shared_mutex& mutex)
        : m_mutex {mutex}
    {
        m_inventoryDatabase = std::make_unique<Utils::RocksDBWrapper>(INVENTORY_DB_PATH);
        auto& inventoryDatabase = *m_inventoryDatabase;

        m_osOrchestration = TFactoryOrchestrator::create(
            ScannerType::Os, databaseFeedManager, indexerConnector, inventoryDatabase, reportDispatcher);
        m_packageInsertOrchestration = TFactoryOrchestrator::create(
            ScannerType::PackageInsert, databaseFeedManager, indexerConnector, inventoryDatabase, reportDispatcher);
        m_packageDeleteOrchestration = TFactoryOrchestrator::create(
            ScannerType::PackageDelete, databaseFeedManager, indexerConnector, inventoryDatabase, reportDispatcher);
        m_integrityClearOrchestration = TFactoryOrchestrator::create(
            ScannerType::IntegrityClear, databaseFeedManager, indexerConnector, inventoryDatabase, reportDispatcher);
        m_reScanAllOrchestration = TFactoryOrchestrator::create(
            ScannerType::ReScanAllAgents, databaseFeedManager, indexerConnector, inventoryDatabase, reportDispatcher);
        m_reScanOrchestration = TFactoryOrchestrator::create(
            ScannerType::ReScanSingleAgent, databaseFeedManager, indexerConnector, inventoryDatabase, reportDispatcher);
        m_deleteAgentScanOrchestration = TFactoryOrchestrator::create(ScannerType::CleanupSingleAgentData,
                                                                      databaseFeedManager,
                                                                      indexerConnector,
                                                                      inventoryDatabase,
                                                                      reportDispatcher);
        m_cleanUpDataOrchestration = TFactoryOrchestrator::create(ScannerType::CleanupAllAgentData,
                                                                  std::move(databaseFeedManager),
                                                                  std::move(indexerConnector),
                                                                  inventoryDatabase,
                                                                  std::move(reportDispatcher));

        nlohmann::json response; // JSON object to store the response from the database
        std::string managerName; // String to store the retrieved manager name

        // Try to query the database to retrieve the manager name
        try
        {
            // Query the database to get the manager name
            static TSocketDBWrapper socketDBWrapper(WDB_SOCKET);
            socketDBWrapper.query(WazuhDBQueryBuilder::builder().globalSelectCommand("agent-name 000").build(),
                                  response);

            // If the response is not empty, retrieve the manager name
            if (!response.empty())
            {
                managerName = response.front().at("name");
            }
            else
            {
                // If the response is empty, throw an exception
                throw std::runtime_error(
                    "Failed to retrieve manager name. The response from the global database was empty.");
            }
        }
        // Catch any exceptions that occur during the database query
        catch (const std::exception& e)
        {
            // Log a warning indicating the failure to retrieve the manager name
            logWarn(WM_VULNSCAN_LOGTAG, "%s, Using the hostname by fallback.", e.what());

            // Define the maximum size for the hostname
            constexpr auto MAX_HOSTNAME_SIZE = 256;
            char managerNameRaw[MAX_HOSTNAME_SIZE] = {0};

            // Get the hostname and store it in the managerName string
            TOSPrimitives::gethostname(managerNameRaw, MAX_HOSTNAME_SIZE);

            managerName = managerNameRaw;
        }

        // Set the retrieved manager name in the global data object
        GlobalData::instance().managerName(managerName);
        initEventDelayedDispatcher();
    }
    ~TScanOrchestrator() = default;
    // LCOV_EXCL_STOP

    /**
     * @brief Start the delayed event dispatcher
     */
    void initEventDelayedDispatcher()
    {
        m_eventDelayedDispatcher = std::make_shared<EventDelayedDispatcher>(
            // coverity[copy_constructor_call]
            [this](rocksdb::PinnableSlice& element)
            {
                try
                {
                    processEvent(element, true);
                }
                catch (const WdbDataException& e)
                {
                    m_eventDelayedDispatcher->postpone(e.agentId(), std::chrono::seconds(DELAYED_POSTPONE_SECONDS));
                    logDebug2(WM_VULNSCAN_LOGTAG, "Postponed delayed event for agent %s", e.agentId().c_str());
                    throw std::runtime_error(e.what());
                }
                catch (const std::exception& e)
                {
                    logError(WM_VULNSCAN_LOGTAG, "Error processing delayed event: %s", e.what());
                }
            },
            DELAYED_QUEUE_PATH);
    }

    /**
     * @brief Push an event to the delayed dispatcher.
     * @param element Event to push.
     * @param agentId Agent ID.
     */
    void pushEventToDelayedDispatcher(const rocksdb::PinnableSlice& element, const std::string& agentId)
    {
        m_eventDelayedDispatcher->push(agentId, element);
    }

    /**
     * @brief Process an event.
     *
     * @param input Event to process.
     * @param isDelayed Flag to indicate if the event is delayed.
     */
    void processEvent(const rocksdb::PinnableSlice& input, const bool isDelayed = false) const
    {
        auto message = GetMessageBuffer(input.data());

        if (message->type() == BufferType::BufferType_RSync)
        {
            std::variant<const SyscollectorDeltas::Delta*,
                         const SyscollectorSynchronization::SyncMsg*,
                         const nlohmann::json*>
                data = SyscollectorSynchronization::GetSyncMsg(message->data()->data());

            run(data, input, isDelayed);
        }
        else if (message->type() == BufferType::BufferType_DBSync)
        {
            std::variant<const SyscollectorDeltas::Delta*,
                         const SyscollectorSynchronization::SyncMsg*,
                         const nlohmann::json*>
                data = SyscollectorDeltas::GetDelta(message->data()->data());

            run(data, input, isDelayed);
        }
        else if (message->type() == BufferType::BufferType_JSON)
        {
            auto jsonData = nlohmann::json::parse(message->data()->data());
            std::variant<const SyscollectorDeltas::Delta*,
                         const SyscollectorSynchronization::SyncMsg*,
                         const nlohmann::json*>
                data = &jsonData;

            run(data, input, isDelayed);
        }
        else
        {
            throw std::runtime_error("Unknown event type");
        }
    }

private:
    /**
     * @brief Runs orchestrator, decoding and building context.
     *
     * @param data Data to process.
     * @param rawData Raw data to process.
     * @param isDelayed Flag to indicate if the event is delayed.
     */
    void run(std::variant<const SyscollectorDeltas::Delta*,
                          const SyscollectorSynchronization::SyncMsg*,
                          const nlohmann::json*> data,
             const rocksdb::PinnableSlice& rawData,
             bool isDelayed) const
    {
        // The scan only reads the content
        std::shared_lock lock(m_mutex);

        auto context = std::make_shared<TScanContext>(data);
        const auto type = context->getType();

        if (!isDelayed && type != ScannerType::CleanupAllAgentData && type != ScannerType::ReScanAllAgents &&
            m_eventDelayedDispatcher->size(context->agentId()))
        {
            m_eventDelayedDispatcher->push(context->agentId(), rawData);
        }
        else
        {
            switch (type)
            {
                case ScannerType::PackageInsert: m_packageInsertOrchestration->handleRequest(std::move(context)); break;
                case ScannerType::PackageDelete: m_packageDeleteOrchestration->handleRequest(std::move(context)); break;
                case ScannerType::Os: m_osOrchestration->handleRequest(std::move(context)); break;
                case ScannerType::IntegrityClear:
                    m_integrityClearOrchestration->handleRequest(std::move(context));
                    break;
                // LCOV_EXCL_START
                case ScannerType::ReScanAllAgents: m_reScanAllOrchestration->handleRequest(std::move(context)); break;
                case ScannerType::ReScanSingleAgent: m_reScanOrchestration->handleRequest(std::move(context)); break;
                case ScannerType::CleanupAllAgentData:
                    m_cleanUpDataOrchestration->handleRequest(std::move(context));
                    break;
                case ScannerType::CleanupSingleAgentData:
                    m_deleteAgentScanOrchestration->handleRequest(std::move(context));
                    break;
                // LCOV_EXCL_STOP
                default: return;
            }
            logDebug2(WM_VULNSCAN_LOGTAG, "Event type: %d processed", type);
        }
    }

    /**
     * @brief Indexer connector.
     *
     */
    std::string m_managerName;
    std::unique_ptr<Utils::RocksDBWrapper> m_inventoryDatabase;
    std::shared_ptr<TOrchestrationNode> m_osOrchestration;
    std::shared_ptr<TOrchestrationNode> m_packageInsertOrchestration;
    std::shared_ptr<TOrchestrationNode> m_packageDeleteOrchestration;
    std::shared_ptr<TOrchestrationNode> m_hotfixInsertOrchestration;
    std::shared_ptr<TOrchestrationNode> m_hotfixDeleteOrchestration;
    std::shared_ptr<TOrchestrationNode> m_integrityClearOrchestration;
    std::shared_ptr<TOrchestrationNode> m_fetchAllFromGlobalDbOrchestration;
    std::shared_ptr<TOrchestrationNode> m_reScanAllOrchestration;
    std::shared_ptr<TOrchestrationNode> m_reScanOrchestration;
    std::shared_ptr<TOrchestrationNode> m_cleanUpDataOrchestration;
    std::shared_ptr<TOrchestrationNode> m_deleteAgentScanOrchestration;
    std::shared_mutex& m_mutex;
    std::shared_ptr<EventDelayedDispatcher> m_eventDelayedDispatcher;
};

using ScanOrchestrator = TScanOrchestrator<>;

#endif // _SCAN_ORCHESTRATOR_HPP
