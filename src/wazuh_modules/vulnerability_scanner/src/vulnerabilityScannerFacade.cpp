/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * March 25, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "vulnerabilityScannerFacade.hpp"
#include "agentReScanException.hpp"
#include "agentReScanListException.hpp"
#include "archiveHelper.hpp"
#include "defs.h"
#include "loggerHelper.h"
#include "messageBuffer_generated.h"
#include "wazuh_modules/vulnerability_scanner/src/policyManager/policyManager.hpp"
#include "wdbDataException.hpp"
#include "xzHelper.hpp"
#include <string>

constexpr auto VULNERABILITY_SCANNER_TEMPLATE = "templates/vd_states_template.json";
constexpr auto DEFAULT_QUEUE_PATH = "queue/sockets/queue";
constexpr auto REPORTS_QUEUE_PATH = "queue/vd/reports";
constexpr auto REPORTS_BULK_SIZE {1};
constexpr auto EVENTS_BULK_SIZE {1};
constexpr auto EVENTS_QUEUE_PATH = "queue/vd/event";
constexpr auto MICROSEC_FACTOR {1000000};

constexpr auto COMPRESSED_DB_PATH {"tmp/vd_1.0.0_vd_4.8.0.tar.xz"};
constexpr auto DECOMPRESSED_DB_PATH {"tmp/vd_1.0.0_vd_4.8.0.tar"};
constexpr auto VD_STATE_QUEUE_PATH = "queue/vd/state_track";
constexpr auto VD_KEYSTORE_PATH = "queue/keystore";
constexpr auto VD_DATABASE_PATH {"queue/vd"};
constexpr auto VD_DATABASE_VERSION_KEY {"installed_content"};

bool VulnerabilityScannerFacade::decompressDatabase(std::string_view databaseVersion) const
{
    bool ret = false;

    // Check database version. It will attempt to decompress the database
    // if the version does not match or the state_track does not have information
    if ((databaseVersion.compare(__ossec_version) != 0 || databaseVersion.empty()) && std::filesystem::exists(TMP_DIR))
    {
        // Check for XZ compressed file.
        if (!std::filesystem::exists(COMPRESSED_DB_PATH))
        {
            logDebug2(WM_VULNSCAN_LOGTAG,
                      "No database compressed file found at '%s'. Skipping decompression.",
                      COMPRESSED_DB_PATH);
            return ret;
        }

        logInfo(WM_VULNSCAN_LOGTAG, "Starting database file decompression.");
        logDebug2(WM_VULNSCAN_LOGTAG, "Starting XZ file decompression.");

        // Decompress XF file format.
        Utils::XzHelper(std::filesystem::path(COMPRESSED_DB_PATH), std::filesystem::path(DECOMPRESSED_DB_PATH))
            .decompress();

        // Clean up feed database.
        std::filesystem::remove_all(DATABASE_PATH);

        // Extract queue/vd and queue/vd_updater
        std::vector<std::string> extractOnly;
        extractOnly.emplace_back(VD_DATABASE_PATH);

        // Decompress also keystore if missing.
        if (!std::filesystem::exists(VD_KEYSTORE_PATH))
        {
            extractOnly.emplace_back(VD_KEYSTORE_PATH);
        }

        logDebug2(WM_VULNSCAN_LOGTAG, "Starting TAR file decompression.");

        // Decompress TAR file format.
        Utils::ArchiveHelper::decompress(DECOMPRESSED_DB_PATH, m_shouldStop, "", extractOnly);

        // Clean up.
        std::filesystem::remove_all(DECOMPRESSED_DB_PATH);

        if (!m_shouldStop.load())
        {
            ret = true;
            logInfo(WM_VULNSCAN_LOGTAG, "Database decompression finished.");
        }
    }

    return ret;
}

void VulnerabilityScannerFacade::initAlertReportDispatcher()
{
    const auto alertsMaxEps = PolicyManager::instance().getAlertsMaxEventsPerSecond();
    const auto reportsWait = alertsMaxEps > 0 ? MICROSEC_FACTOR / alertsMaxEps : 0;

    m_reportSocketClient =
        std::make_shared<SocketClient<Socket<OSPrimitives, NoHeaderProtocol>, EpollWrapper>>(DEFAULT_QUEUE_PATH);
    m_reportSocketClient->connect(
        [](const char*, uint32_t, const char*, uint32_t)
        {
            // Not used
        },
        []()
        {
            // Not used
        },
        SOCK_DGRAM);
    m_reportDispatcher = std::make_shared<ReportDispatcher>(
        [this, reportsWait](std::queue<std::string>& dataQueue)
        {
            while (!dataQueue.empty())
            {
                const auto& data = dataQueue.front();
                m_reportSocketClient->send(data.c_str(), data.size());
                // We wait to keep the maximum number of events per second
                if (reportsWait > 0)
                {
                    std::this_thread::sleep_for(std::chrono::microseconds(reportsWait));
                }
                logDebug2(WM_VULNSCAN_LOGTAG, "Report sent: %s", data.c_str());
                dataQueue.pop();
            }
        },
        REPORTS_QUEUE_PATH,
        REPORTS_BULK_SIZE);
}

/**
 * @brief Start the event dispatcher
 *
 */
void VulnerabilityScannerFacade::initEventDispatcher()
{
    // Init Orchestrator
    auto scanOrchestrator = std::make_shared<ScanOrchestrator>(
        m_indexerConnector, m_databaseFeedManager, m_reportDispatcher, m_internalMutex);

    m_eventDispatcher->startWorker(
        // coverity[copy_constructor_call]
        [scanOrchestrator](std::queue<rocksdb::PinnableSlice>& dataQueue)
        {
            const auto& element = dataQueue.front();
            try
            {
                if (flatbuffers::Verifier verifier(reinterpret_cast<const uint8_t*>(element.data()), element.size());
                    VerifyMessageBufferBuffer(verifier))
                {
                    scanOrchestrator->processEvent(element);
                }
            }
            catch (const WdbDataException& e)
            {
                scanOrchestrator->pushEventToDelayedDispatcher(element, e.agentId());
            }
            catch (const AgentReScanException& e)
            {
                scanOrchestrator->pushEventToDelayedDispatcher(element, e.agentId());
            }
            catch (const AgentReScanListException& e)
            {
                for (const auto& agentData : e.agentList())
                {
                    scanOrchestrator->pushEventToDelayedDispatcher(element, agentData.id);
                }
            }
            catch (const std::exception& e)
            {
                logError(WM_VULNSCAN_LOGTAG, "VulnerabilityScannerFacade::initEventDispatcher: %s", e.what());
            }
        });
}

/**
 * @brief Start the deltas subscription
 *
 */
void VulnerabilityScannerFacade::initDeltasSubscription()
{
    // Subscription to syscollector delta events.
    m_syscollectorDeltasSubscription =
        std::make_unique<RouterSubscriber>("deltas-syscollector", "vulnerability_scanner_deltas");
    m_syscollectorDeltasSubscription->subscribe(
        // coverity[copy_constructor_call]
        [this](const std::vector<char>& message) { pushEvent(message, BufferType::BufferType_DBSync); });
}

/**
 * @brief Start the rsync events subscription.
 *
 */
void VulnerabilityScannerFacade::initRsyncSubscription()
{
    // Subscription to syscollector rsync events.
    m_syscollectorRsyncSubscription =
        std::make_unique<RouterSubscriber>("rsync-syscollector", "vulnerability_scanner_rsync");
    m_syscollectorRsyncSubscription->subscribe(
        // coverity[copy_constructor_call]
        [this](const std::vector<char>& message) { pushEvent(message, BufferType::BufferType_RSync); });
}

void VulnerabilityScannerFacade::initWazuhDBEventSubscription()
{
    m_wdbAgentEventsSubscription =
        std::make_unique<RouterSubscriber>("wdb-agent-events", "vulnerability_scanner_database");
    m_wdbAgentEventsSubscription->subscribe([this](const std::vector<char>& message)
                                            { pushEvent(message, BufferType::BufferType_JSON); });
}

void VulnerabilityScannerFacade::vulnerabilityScannerPolicyChange() const
{
    // Check if a rescan is required based on the value of 'm_shouldRescan'.
    if (m_shouldRescan.load())
    {
        logDebug1(WM_VULNSCAN_LOGTAG, "Perform re-scan after reboot");

        // Create a JSON object 'dataValue' to specify the action as "cleanup."
        std::string dataValueCleanup = R"({"action":"cleanup"})";
        const std::vector<char> messageCleanup(dataValueCleanup.begin(), dataValueCleanup.end());
        pushEvent(messageCleanup, BufferType::BufferType_JSON);

        // Create a JSON object 'dataValue' to specify the action as "reboot."
        std::string dataValueReScan = R"({"action":"reboot"})";
        const std::vector<char> messageReScan(dataValueReScan.begin(), dataValueReScan.end());
        pushEvent(messageReScan, BufferType::BufferType_JSON);
    }
}

void VulnerabilityScannerFacade::managerScanPolicyChange(Utils::RocksDBWrapper& stateDB) const
{
    std::string lastDisableState;
    const auto& policyManager = PolicyManager::instance();

    stateDB.get("disable_manager_scan", lastDisableState);

    if (!lastDisableState.empty())
    {
        // Check if the last known disable state is "no" and the scanner is now disabled
        if (lastDisableState == "no" &&
            (policyManager.getManagerDisabledScan() == DisableManagerScanStatus::DISABLE_MANAGER_SCAN))
        {
            // Perform manager cleanup
            logInfo(WM_VULNSCAN_LOGTAG, "Vulnerability scanner in manager deactivated. Performing clean-up.");

            // Create a JSON object 'dataValue' to specify the action as "deleteAgent."
            nlohmann::json dataValueJson;
            dataValueJson["action"] = "deleteAgent";
            dataValueJson["agent_info"]["agent_id"] = "000";
            dataValueJson["agent_info"]["node_name"] = policyManager.getManagerNodeName();

            const auto& dataValue = dataValueJson.dump();
            const std::vector<char> message(dataValue.begin(), dataValue.end());
            pushEvent(message, BufferType::BufferType_JSON);
        }
        // Check if the last known disable state is "yes" and the scanner is now enabled
        else if (lastDisableState == "yes" &&
                 (policyManager.getManagerDisabledScan() == DisableManagerScanStatus::SCAN_MANAGER))
        {
            // Initiate a scan
            logInfo(WM_VULNSCAN_LOGTAG, "Vulnerability scanner in manager activated. Performing scan.");
            nlohmann::json dataValueJson;
            dataValueJson["action"] = "scanAgent";
            dataValueJson["agent_info"]["agent_id"] = "000";
            dataValueJson["agent_info"]["node_name"] = policyManager.getManagerNodeName();

            const auto& dataValue = dataValueJson.dump();
            const std::vector<char> message(dataValue.begin(), dataValue.end());

            pushEvent(message, BufferType::BufferType_JSON);
        }
    }
    stateDB.put("disable_manager_scan",
                policyManager.getManagerDisabledScan() == DisableManagerScanStatus::DISABLE_MANAGER_SCAN ? "yes"
                                                                                                         : "no");
}
// LCOV_EXCL_START
void VulnerabilityScannerFacade::start(
    const std::function<void(
        const int, const std::string&, const std::string&, const int, const std::string&, const std::string&, va_list)>&
        logFunction,
    const nlohmann::json& configuration,
    const bool noWaitToStop,
    const bool reloadGlobalMapsStartup,
    const bool initContentUpdater)
{
    try
    {

        m_noWaitToStop = noWaitToStop;

        // Initialize logging
        Log::assignLogFunction(logFunction);

        // Policy manager initialization.
        auto& policyManager = PolicyManager::instance();
        policyManager.initialize(configuration);

        // Create a unique pointer to a RocksDBWrapper instance for managing state information.
        auto stateDB = std::make_unique<Utils::RocksDBWrapper>(VD_STATE_QUEUE_PATH);

        // Initialize a string to store the last known state from the database.
        std::string lastState;

        // Retrieve the last known state from the database and store it in 'lastState'.
        stateDB->get("previous_config", lastState);

        // Check if 'lastState' is not empty.
        if (!lastState.empty())
        {
            // Check if the previous state was "no" (disabled) and the current policy allows vulnerability detection.
            if (lastState == "no" && policyManager.isVulnerabilityDetectionEnabled())
            {
                // Log that the vulnerability scanner module is enabled and re-scan all agents.
                logInfo(WM_VULNSCAN_LOGTAG, "Vulnerability scanner module is enabled. Re-scanning all agents.");

                // Update the database state to "yes" (enabled) and set 'm_shouldRescan' to true so the thread can
                // rescan.
                stateDB->put("previous_config", "yes");
                m_shouldRescan.store(true);
            }
            // Check if the previous state was "yes" (enabled) and the current policy disables vulnerability detection.
            else if (lastState == "yes" && !policyManager.isVulnerabilityDetectionEnabled())
            {
                // Update the database state to "no" (disabled).
                stateDB->put("previous_config", "no");
            }
        }
        else
        {
            // If the value wasn't present, this is the first execution of the refactored module. We store the current
            // value also.
            stateDB->put("previous_config", policyManager.isVulnerabilityDetectionEnabled() ? "yes" : "no");
        }

        // Return if the module is disabled.
        if (!policyManager.isVulnerabilityDetectionEnabled())
        {
            logInfo(WM_VULNSCAN_LOGTAG, "Vulnerability scanner module is disabled");
            return;
        }

        // Indexer connector initialization.
        if (policyManager.isIndexerEnabled())
        {
            const auto& indexerConfig = policyManager.getIndexerConfiguration();
            m_indexerConnector =
                std::make_shared<IndexerConnector>(policyManager.getIndexerConfiguration(),
                                                   indexerConfig.contains("template_path")
                                                       ? indexerConfig.at("template_path").get_ref<const std::string&>()
                                                       : VULNERABILITY_SCANNER_TEMPLATE,
                                                   logFunction);
        }

        // Socket client initialization to send vulnerability reports.
        initAlertReportDispatcher();

        m_eventDispatcher = std::make_shared<EventDispatcher>(EVENTS_QUEUE_PATH, EVENTS_BULK_SIZE);

        // Policy manager change
        managerScanPolicyChange(*stateDB);

        // Rescan if VD policy change from false to true.
        vulnerabilityScannerPolicyChange();

        // Subscription to syscollector delta events.
        initDeltasSubscription();

        // Subscription to syscollector rsync events.
        initRsyncSubscription();

        // Wazuh DB event subscription.
        initWazuhDBEventSubscription();

        // Query the current database version.
        std::string databaseVersion;
        stateDB->get(VD_DATABASE_VERSION_KEY, databaseVersion);

        // Decompress database content.
        if (decompressDatabase(databaseVersion) && !m_shouldStop.load())
        {
            stateDB->put(VD_DATABASE_VERSION_KEY, __ossec_version);

            // Cleanup
            std::filesystem::remove_all(COMPRESSED_DB_PATH);

            logDebug1(WM_VULNSCAN_LOGTAG, "Updated %s key of %s.", VD_DATABASE_VERSION_KEY, VD_STATE_QUEUE_PATH);
        }

        // Database feed manager initialization.
        m_databaseFeedManager = std::make_shared<DatabaseFeedManager>(
            m_indexerConnector, m_shouldStop, m_internalMutex, true, reloadGlobalMapsStartup, initContentUpdater);

        // Add subscribers for policy updates.
        policyManager.addSubscriber(m_databaseFeedManager);

        // Event dispatcher initialization.
        initEventDispatcher();

        logInfo(WM_VULNSCAN_LOGTAG, "Vulnerability scanner module started");
    }
    catch (const std::exception& e)
    {
        logError(WM_VULNSCAN_LOGTAG, "VulnerabilityScannerFacade::start: %s", e.what());
    }
    catch (...)
    {
        logError(WM_VULNSCAN_LOGTAG, "VulnerabilityScannerFacade::start: Unknown exception");
    }
}
// LCOV_EXCL_STOP

void VulnerabilityScannerFacade::stop()
{
    // Atomic flag section
    if (m_noWaitToStop)
    {
        m_shouldStop.store(true);
    }

    m_retryWait.notify_all();

    // Threads join
    if (m_rebootThread.joinable())
    {
        m_rebootThread.join();
    }

    if (m_managerThread.joinable())
    {
        m_managerThread.join();
    }

    // Reset shared pointers
    m_indexerConnector.reset();
    m_databaseFeedManager.reset();
    m_syscollectorRsyncSubscription.reset();
    m_syscollectorDeltasSubscription.reset();
    m_wdbAgentEventsSubscription.reset();

    // Policy manager teardown
    PolicyManager::instance().teardown();
    m_reportDispatcher.reset();
    m_eventDispatcher.reset();
}
